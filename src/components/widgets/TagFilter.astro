---
import type { CollectionEntry } from 'astro:content'

interface Props {
  posts: CollectionEntry<'posts'>[]
}

const { posts } = Astro.props

// 提取所有标签并统计数量
const tagCounts = new Map<string, number>()

posts.forEach((post) => {
  const tags = post.data.tags || []
  tags.forEach((tag) => {
    tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1)
  })
})

// 按文章数量排序标签
const sortedTags = Array.from(tagCounts.entries())
  .sort((a, b) => b[1] - a[1])
  .map(([tag, count]) => ({ tag, count }))

// 如果没有标签，不显示组件
if (sortedTags.length === 0) {
  return null
}
---

<div class="tag-filter-container">
  <nav class="tag-filter" id="tag-filter">
    <button class="tag-item active" data-tag="all" aria-label="Show all posts">
      <span class="tag-name">All</span>
      <span class="tag-count">{posts.length}</span>
    </button>

    {
      sortedTags.map(({ tag, count }) => (
        <button class="tag-item" data-tag={tag} aria-label={`Show posts tagged with ${tag}`}>
          <span class="tag-name">{tag}</span>
          <span class="tag-count">{count}</span>
        </button>
      ))
    }
  </nav>
</div>

<script>
  function initTagFilter() {
    const tagFilter = document.getElementById('tag-filter')
    const tagItems = document.querySelectorAll('.tag-item')
    const postItems = document.querySelectorAll('.post-list-item')

    if (!tagFilter || !tagItems.length) return

    // 标签点击事件
    tagItems.forEach((item) => {
      item.addEventListener('click', () => {
        const selectedTag = item.getAttribute('data-tag')
        if (!selectedTag) return

        // 更新激活状态
        tagItems.forEach((tag) => tag.classList.remove('active'))
        item.classList.add('active')

        // 筛选文章
        filterPosts(selectedTag)

        // 更新URL（可选，保持状态）
        const url = new URL(window.location.href)
        if (selectedTag === 'all') {
          url.searchParams.delete('tag')
        } else {
          url.searchParams.set('tag', selectedTag)
        }
        history.pushState({}, '', url.toString())
      })
    })

    // 从URL参数初始化标签
    const urlParams = new URLSearchParams(window.location.search)
    const initialTag = urlParams.get('tag')
    if (initialTag) {
      const targetTag = document.querySelector(`[data-tag="${initialTag}"]`) as HTMLElement
      if (targetTag) {
        targetTag.click()
      }
    }
  }

  function filterPosts(selectedTag: string) {
    const postItems = document.querySelectorAll('.post-list-item')
    const postList = document.querySelector('main ul')
    let visibleCount = 0

    postItems.forEach((item, index) => {
      const htmlItem = item as HTMLElement
      const isVisible = selectedTag === 'all' || hasTag(htmlItem, selectedTag)

      if (isVisible) {
        htmlItem.style.display = 'list-item'
        visibleCount++

        // 添加淡入动画
        htmlItem.style.opacity = '0'
        htmlItem.style.transform = 'translateY(10px)'

        setTimeout(() => {
          htmlItem.style.transition = 'opacity 0.3s ease, transform 0.3s ease'
          htmlItem.style.opacity = '1'
          htmlItem.style.transform = 'translateY(0)'
        }, index * 30)
      } else {
        htmlItem.style.display = 'none'
      }
    })

    // 如果没有找到匹配的文章，显示提示
    showNoResultsMessage(
      visibleCount === 0 && selectedTag !== 'all',
      selectedTag,
      postList as HTMLElement
    )
  }

  function hasTag(postItem: HTMLElement, tag: string): boolean {
    const postTags = postItem.getAttribute('data-tags')
    if (!postTags) return false

    return postTags
      .split(',')
      .map((t) => t.trim())
      .includes(tag)
  }

  function showNoResultsMessage(show: boolean, tag: string, container: HTMLElement | null) {
    const existingMessage = document.getElementById('no-results-message')

    if (existingMessage) {
      existingMessage.remove()
    }

    if (show && container) {
      const message = document.createElement('li')
      message.id = 'no-results-message'
      message.className = 'no-results'
      message.innerHTML = `
        <div class="no-results-content">
          <p>No posts found with tag "${tag}"</p>
          <button onclick="document.querySelector('[data-tag=all]')?.click()" class="show-all-btn">
            Show all posts
          </button>
        </div>
      `
      container.appendChild(message)
    }
  }

  // 初始化
  document.addEventListener('DOMContentLoaded', initTagFilter)
  document.addEventListener('astro:page-load', initTagFilter)
</script>

<style>
  .tag-filter-container {
    margin: 2rem 0 2.5rem 0;
  }

  .tag-filter {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
  }

  .tag-item {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    background: var(--astro-code-background);
    border: 1px solid var(--border);
    border-radius: 16px;
    padding: 0.375rem 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: var(--font-size-s);
    color: var(--text-secondary);
    text-decoration: none;
    font-family: var(--sans);
  }

  .tag-item:hover {
    background: var(--selection);
    color: var(--text-primary);
    border-color: var(--text-tertiary);
    transform: translateY(-1px);
  }

  .tag-item.active {
    background: var(--text-primary);
    color: var(--bg);
    border-color: var(--text-primary);
  }

  .tag-item.active:hover {
    transform: none;
  }

  .tag-name {
    font-weight: var(--font-weight-regular);
    white-space: nowrap;
  }

  .tag-count {
    background: currentColor;
    color: var(--bg);
    border-radius: 50%;
    width: 1.25rem;
    height: 1.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: var(--font-weight-bold);
    opacity: 0.8;
    min-width: 1.25rem;
  }

  .tag-item.active .tag-count {
    background: var(--bg);
    color: var(--text-primary);
  }

  /* No results message */
  :global(.no-results) {
    list-style: none !important;
    margin: 2rem 0 !important;
    padding: 0 !important;
  }

  :global(.no-results-content) {
    text-align: center;
    color: var(--text-secondary);
    padding: 2rem 1rem;
  }

  :global(.no-results-content p) {
    margin-bottom: 1rem;
  }

  :global(.show-all-btn) {
    background: var(--astro-code-background);
    border: 1px solid var(--border);
    border-radius: 8px;
    padding: 0.5rem 1rem;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: var(--font-size-s);
  }

  :global(.show-all-btn:hover) {
    background: var(--selection);
    color: var(--text-primary);
  }

  @media (max-width: 640px) {
    .tag-filter {
      gap: 0.375rem;
    }

    .tag-item {
      padding: 0.25rem 0.5rem;
      font-size: 0.8125rem;
    }

    .tag-count {
      width: 1rem;
      height: 1rem;
      font-size: 0.625rem;
      min-width: 1rem;
    }
  }
</style>
